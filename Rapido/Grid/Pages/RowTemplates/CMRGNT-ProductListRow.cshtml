@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Content
@using Dynamicweb.Content.Items
@using Dynamicweb
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Services
@using System.Collections.Generic
@using System
@using System.Text.RegularExpressions
@using Dynamicweb.Core
@using Dynamicweb.Ecommerce.Frontend;
@using Dynamicweb.Environment
@using Df.Dw
@using Df.Dw.Rapido

@* Include the components *@
@Include("../../../Components/GridBuilder.cshtml")
@Include("../../../Components/GeneralComponents.cshtml") 
@Include("IntroOutro.cshtml")

@functions {
    public string GenerateRgba(string color, string opacity)
    {
        color = color.Replace("#", "");
        if (color.Length == 6) {
            return "rgba(" + Convert.ToInt32(color.Substring(0, 2), 16) + ", " + Convert.ToInt32(color.Substring(2, 2), 16) + ", " + Convert.ToInt32(color.Substring(4, 2), 16) + ", " + opacity + ");";
        } else {
            return Convert.ToInt16(color).ToString();
        }
    }
}

@{
    bool productListShowFavoriteButton = !Pageview.AreaSettings.GetItem("ProductList").GetItem("GridView").GetBoolean("HideFavoriteButton") && Pageview.User != null;
    string productListImageZoomOnHover = Pageview.AreaSettings.GetItem("ProductList").GetItem("GridView").GetBoolean("HoverImageZoom") ? "image-hover--zoom" : "";
    bool productListShowNumber = Pageview.AreaSettings.GetItem("ProductList").GetItem("GridView").GetBoolean("ShowProductNumber");
    bool productListShowStock = Pageview.AreaSettings.GetItem("ProductList").GetItem("GridView").GetBoolean("ShowStockAndShipping");
    bool showAddToDownloadButton = Pageview.AreaSettings.GetItem("ProductList").GetItem("GridView").GetBoolean("ShowAddToDownloadButton");

    int productListPageSize = 4;

    if (Pageview.Device.ToString() == "Mobile")
    {
        productListPageSize = 1;
    }

    if (Pageview.Device.ToString() == "Tablet")
    {
        productListPageSize = 3;
    }

    int productListColumnWidth = 12 / productListPageSize;
}

@helper RenderRow(GridRowViewModel row, string size) { 
    var colorService = new ColorSwatchService();
    string columnLayout = size != "full" ? "content-row--" + size + "col" : "content-row--full"; 
    string rowWidth = row.Item.GetList("Width") != null ? "content-row--" + row.Item.GetList("Width").SelectedValue : "";
    string rowHeight = row.Item.GetList("Height") != null ? "content-row--height-" + row.Item.GetList("Height").SelectedValue : "";
    string spacing = row.Item.GetList("Spacing") != null ? "content-row--spacing-" + row.Item.GetList("Spacing").SelectedValue : "";
    string spacingPosition = row.Item.GetList("SpacingPosition") != null ? "content-row--spacing-position-" + row.Item.GetList("SpacingPosition").SelectedValue : "";
    string columnGap = row.Item.GetList("ColumnGap") != null ? "content-row--column-gap-" + row.Item.GetList("ColumnGap").SelectedValue : "content-row--column-gap-sm";
    string backgroundColor = row.Item.GetString("BackgroundColor") != null ? row.Item.GetString("BackgroundColor") : "";
    backgroundColor = !backgroundColor.Contains("#") ? "background-color: " + colorService.GetHexColor(Pageview.AreaID, backgroundColor) : "background-color: " + backgroundColor;
    //intro outro
    ItemViewModel intro = row.Item.GetItem("Intro");
    ItemViewModel outro = row.Item.GetItem("Outro");

    string elementType = Model.Item.GetList("ListType").SelectedValue;
    //int elementSize = Model.Item.GetInt32("NumberOfProductsInList");
    string productsPageID = GetPageIdByNavigationTag("PromotionFeed").ToString();
    string elementFeed = "/Default.aspx?ID=" + productsPageID +"&amp;feed=true&PageSize=4";

    //string baseFeedPageUrl = "/Default.aspx?ID=" + GetPageIdByNavigationTag("PromotionFeed") + "&PageSize=" + relatedProductsPageSize + "&ProdID=" + GetString("Ecom:Product.ID") + "&feed=true";
    //string relatedFeed = baseFeedPageUrl + "&" + relatedGroupId + "=" + GetString("Ecom:Product.ID") + "&GroupName=" + relatedGroupId;

    //Manual list
    string elementsManualList = "";
    int elementProductsCount = 6;//elementSize;
    if(elementType == "0"){
        var elementProducts = row.Item.GetValue("Products") as List<ProductViewModel>;
        elementProductsCount = elementProducts != null ? elementProducts.Count() : 0;
        elementsManualList = elementProductsCount > 0 ? string.Join(",", elementProducts.Select(x => x.Id)) : "";
        elementFeed = elementsManualList != "" ? elementFeed +"&ProdIDs=" + elementsManualList : elementFeed;
    }

    string name = "TEst section";

    Image image = new Image();

    if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
    {
        int cropMode = !string.IsNullOrEmpty(Convert.ToString(Model.Item.GetList("ImageCrop"))) ? Convert.ToInt32(Model.Item.GetList("ImageCrop").SelectedValue) : 0;

        image = new Image
        {
            Path = Model.Item.GetFile("Image") != null ? Model.Item.GetFile("Image").Path : "",
            CssClass = "background-image__cover",
            ImageDefault = new ImageSettings
            {
                Crop = cropMode,
                Height = 845,
                Width = 1920
            },
            ImageMedium = new ImageSettings
            {
                Crop = cropMode,
                Height = 450,
                Width = 1024
            },
            ImageSmall = new ImageSettings
            {
                Crop = cropMode,
                Height = 544,
                Width = 640
            }
        };

        image.FilterPrimary = !string.IsNullOrEmpty(Model.Item.GetList("ImageFilterPrimary").SelectedValue) ? (ImageFilter)Enum.Parse(typeof(ImageFilter), Model.Item.GetList("ImageFilterPrimary").SelectedValue.Replace("-", ""), true) : ImageFilter.None;
        image.FilterSecondary = !string.IsNullOrEmpty(Model.Item.GetList("ImageFilterSecondary").SelectedValue) ? (ImageFilter)Enum.Parse(typeof(ImageFilter), Model.Item.GetList("ImageFilterSecondary").SelectedValue.Replace("-", ""), true) : ImageFilter.None;

        if (!string.IsNullOrEmpty(Model.Item.GetString("ColorForTheFilter")))
        {
            image.FilterColor = Model.Item.GetString("ColorForTheFilter").StartsWith("#") ? GenerateRgba(Model.Item.GetString("ColorForTheFilter"), "0.3") : "";
        }
    }

    <div class="content-container dw-mod" style="@backgroundColor">
        @if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
        {
            <div class="background-image dw-mod">
                <div class="background-image__wrapper dw-mod">
                    @Render(image)
                </div> 
            </div>
        }
        @RenderIntroOutro(intro)
        <div class="content-row @columnLayout @columnGap @rowWidth @rowHeight @spacing @spacingPosition dw-mod">
            @foreach (var column in row.Columns)
            {
                @RenderColumn(column)
            }
             <div class="product__section dw-mod">
                <div class="center-container dw-mod">    
                    @Render(new Heading { Title = name, Level = 2 })
                    <div class="js-handlebars-root" id="ProductList_1" data-template="ProductContainer" data-pre-render-template="ProductPreRenderContainer" data-json-feed="@elementFeed" data-preloader="minimal"></div>
                </div>
            </div>



            
            
        </div>
        @RenderIntroOutro(outro)
    </div>
}

@helper RenderColumn(GridColumnViewModel column) { 
    Paragraph paragraph = column.ParagraphId > 0 ? Services.Paragraphs.GetParagraph(column.ParagraphId) : null;
    var colorService = new ColorSwatchService();

    //All paragraph settings may come from e.g. column.Item.GetItem("Common").GetItem("BackgroundColor") instead

    if (paragraph != null) {
        if (paragraph.Item != null) {
            string backgroundColor = paragraph.Item["BackgroundColor"] != null ? paragraph.Item["BackgroundColor"].ToString() : "";
            backgroundColor = !backgroundColor.Contains("#") ? colorService.GetHexColor(Pageview.AreaID, backgroundColor) : backgroundColor;
            string textColor = paragraph.Item["TextColor"] != null ? paragraph.Item["TextColor"].ToString() : "";
            textColor = !textColor.Contains("#") ? colorService.GetHexColor(Pageview.AreaID, textColor) : textColor;
            string styles = "background-color: " + backgroundColor + "; color: " + textColor;

            string horizontalAlign = paragraph.Item["HorizontalAlignment"] != null ? "u-align-" + paragraph.Item["HorizontalAlignment"].ToString().ToLower() : "";
            string horizontalAlignContent = paragraph.Item["HorizontalAlignmentContent"] != null ? "u-align-content-" + paragraph.Item["HorizontalAlignmentContent"].ToString().ToLower() : "";
            string verticalAlign = paragraph.Item["VerticalAlignment"] != null ? "u-align-self-" + paragraph.Item["VerticalAlignment"].ToString().ToLower() : "";
            string alignmentCssClasses = horizontalAlign + " " + horizontalAlignContent + " " + verticalAlign;

            string itemBodyCssClass = paragraph.Item["MoveBodyInside"] != null ? "u-full-width" : "content-row__item__body";
            itemBodyCssClass += paragraph.Item["MoveBodyInside"] == null && paragraph.Item["Padding"] != null ? " padding-size-" + paragraph.Item["Padding"].ToString().ToLower() : "";
            itemBodyCssClass += paragraph.Item["MoveBodyInside"] == null && paragraph.Item["PaddingPosition"] != null ? " padding-position-" + paragraph.Item["PaddingPosition"].ToString().ToLower() : "";

            <div class="content-row__item rowItemContent-@column.ParagraphId dw-mod" style="@styles">
                @if (!string.IsNullOrEmpty(textColor)) {
                    <style>
                        .rowItemContent-@column.ParagraphId p, .rowItemContent-@column.ParagraphId h1, .rowItemContent-@column.ParagraphId h2, .rowItemContent-@column.ParagraphId h3 {
                             color: @textColor;
                        }
                    </style>
                } 
                <div class="@itemBodyCssClass @alignmentCssClasses dw-mod">
                    @column.Output() 
                </div>
            </div> 
        } else {
            
        }
    } else { 
       //RenderPlaceholderForTheContentBuilder(column)
    }
}

@helper RenderPlaceholderForTheContentBuilder(GridColumnViewModel column) { 
     //For the content builder - Empty columns

    <div class="content-row__item dw-mod">
        <div class="content-row__item__body dw-mod">
            @column.Output() 
        </div>
    </div> 
}

@* Script templates for related products *@
 <script id="ProductPreRenderContainer" type="text/x-template">
    <div class="u-h600px u-full-width">
        <div class="grid">
            <div class="grid__col-12">
                <div class="pre-render-element pre-render-element--md"></div>
            </div>
        </div>
    </div>
</script>

@helper RenderGridViewPriceInfo()
{
    bool pointShopOnly = Pageview.AreaSettings.GetItem("Ecommerce").GetBoolean("PointShopOnly");
    bool showPrice = !Pageview.AreaSettings.GetItem("ProductList").GetBoolean("HidePrice");
    bool showCartButton = Pageview.AreaSettings.GetItem("ProductList").GetItem("GridView").GetBoolean("ShowAddToCartButton");
    bool showVATPrice = Pageview.AreaSettings.GetItem("ProductList").GetBoolean("ShowBothPricesWithWithoutVAT");
    bool isPricesWithVATEnabled = Dynamicweb.Ecommerce.Common.Context.DisplayPricesWithVat;

    if (showPrice && Dynamicweb.Rapido.Services.User.IsPricesAllowed())
    {
        if (pointShopOnly)
        {
            <text>
                {{#if havePointPrice}}
                    <div class="price price--product-list dw-mod">{{points}} @Translate("points")</div>
                    @if (showCartButton)
                    {
                        <text>
                            {{#unless canBePurchasedWithPoints}}
                                <small class="help-text u-no-margin">@Translate("Not enough points to buy this")</small>
                            {{/unless}}
                        </text>
                    }
                {{else}}
                    @Translate("Not available")
                {{/if}}
            </text>
        }
        else
        {
            <div class="price price--product-list dw-mod">{{price}}</div>
            <div class="before-price {{onSale}} dw-mod">{{discount}}</div>
            if (showVATPrice)
            {
                <div class="vat-price vat-price--product-list u-margin-top dw-mod">
                    @if (isPricesWithVATEnabled)
                    {
                        <span>@Translate("excl. VAT")</span><span> ({{priceWithoutVAT}})</span>
                    }
                    else
                    {
                        <span>@Translate("incl. VAT")</span><span> ({{priceWithVAT}})</span>
                    }
                </div>
            }
            <text>
                {{#if priceRRP}}
                    <div><small>@Translate("RRP") {{priceRRP}}</small></div>
                {{/if}}
            </text>
        }
    }
}

@helper RenderProductGridItemAddToCart() { 
    var gridViewSettings = Pageview.AreaSettings.GetItem("ProductList").GetItem("GridView");
    var ecommerceSettings = Pageview.AreaSettings.GetItem("Ecommerce");

    bool pointShopOnly = ecommerceSettings.GetBoolean("PointShopOnly");
    bool showCartButton = gridViewSettings.GetBoolean("ShowAddToCartButton");
    bool showViewButton = gridViewSettings.GetBoolean("ShowViewButton");
    string viewMoreText = gridViewSettings.GetString("ViewMoreText");
    viewMoreText = !string.IsNullOrEmpty(viewMoreText) ? viewMoreText : "View";
    string wrapperClass = "buttons-collection--center";
    int columnsCount = gridViewSettings.GetList("Columns") != null ? Converter.ToInt32(gridViewSettings.GetList("Columns").SelectedValue) : 4;
    bool hideButtonText = columnsCount >= 4 || Pageview.Device.ToString() == "Mobile" || Pageview.Device.ToString() == "Tablet";

    if (pointShopOnly && columnsCount <= 4) 
    {
        hideButtonText = false;
    }

    var viewBtn = new Link
    {
        Href = "{{link}}",
        Id = "CartButton_{{id}}",
        Title = Translate(viewMoreText),
        OnClick = "{{#if googleImpression}}googleEnchantImpressionClick({{googleImpression}}, event){{/if}}",
        ButtonLayout = ButtonLayout.Secondary,
        CssClass = "u-no-margin"
    };

    if (Dynamicweb.Rapido.Services.User.IsBuyingAllowed())
    {
        var addToCartBtn = new AddToCart
        {
            WrapperCssClass = wrapperClass,
            AddButton = new AddToCartButton
            {
                ProductId = "{{productId}}",
                VariantId = "{{variantid}}",
                UnitId = "{{unitId}}",
                ProductInfo = "{{productInfo}}",
                BuyForPoints = pointShopOnly,
                HideTitle = hideButtonText,
                OnClick = "{{facebookPixelAction}}",
                ExtraAttributes = new Dictionary<string, string>
                {
                    { "{{disabledBuyButton}}", "" }
                }
            }
        };

        if (!pointShopOnly) 
        {
            addToCartBtn.QuantitySelector = new QuantitySelector
            {
                Id = "Quantity{{id}}"
            };
        }

        if (showCartButton && Dynamicweb.Rapido.Services.User.IsBuyingAllowed())
        {
            if (!showViewButton)
            {
                @Render(addToCartBtn)
            }
            else
            {
                <text>{{#if hideAddToCartButton}}</text>
                    <div>@Render(viewBtn)</div>
                <text>{{else}}</text>
                    @Render(addToCartBtn)
                <text>{{/if}}</text>
            }
        }
        else if (showViewButton)
        {
            <div>@Render(viewBtn)</div>
        }
    }
    else if (showViewButton)
    {
        <div>@Render(viewBtn)</div>
    }
}

<script id="ProductContainer" type="text/x-template">
        <div class="u-min-h400px u-full-width">
            <div class="grid">
                <div class="grid__col-45px grid__col--bleed-x">
                    <div class="grid__cell grid__cell--align-middle-left">
                        @{
                            Button prevButton = new Button { Icon = new Icon { Prefix = "fas", Name = "fa-chevron-left fa-2x", LabelPosition = IconLabelPosition.After }, ButtonLayout = ButtonLayout.Clean, CssClass = "btn--condensed {{prevdisabled}} u-position-relative", OnClick = "HandlebarsBolt.UpdateContent('ProductList_{{groupName}}', '{{prevPage}}')" };
                            prevButton.ExtraAttributes.Add("", "{{prevdisabled}}");
                        }
                        @Render(prevButton)
                    </div>
                </div>
                <div class="grid__col-auto grid__col--bleed-x">
                    <div id="ProductsContainer" data-template="ProductGridItemContainer" class="grid product-list dw-mod" data-save-cookie="true">
                        {{#each this}}
                            <div id="Product{{productId}}" class="grid__col-@productListColumnWidth product-list__grid-item @productListImageZoomOnHover dw-mod">
                                
                                    <div class="grid__col--auto js-product-scroll-trigger u-no-padding u-full-height" data-params="{{googleImpression}}">
                                        <div class="grid__cell product-list__grid-item__image dw-mod {{noImage}}">
                                            <a href="{{link}}" 
                                               onclick="{{#if googleImpression}}googleEnchantImpressionClick({{googleImpression}}, event){{/if}}" 
                                               class="u-block u-position-relative image-hover__wrapper dw-mod">
                                                @Render(new Image { Path = "{{image}}", ImageDefault = new ImageSettings { Width = 300, Height = 300, Crop = 5, FillCanvas = true, DoNotUpscale = true }, Title = "{{name}}", CssClass = "grid__cell-img grid__cell-img--centered u-min-h180px" })
                                                {{#StickersContainers}}
                                                    {{>StickersContainer}}
                                                {{/StickersContainers}}
                                            </a>
                                            @if (productListShowFavoriteButton)
                                            {
                                                <div class="favorites favorites--for-grid-view u-pull--right {{hasVariants}} dw-mod" {{hasVariants}}>
                                                    {{#Favorite}}
                                                        {{>FavoriteTemplate}}
                                                    {{/Favorite}}
                                                </div>
                                            }
                                        </div>

                                        <div class="grid__cell product-list__grid-item__price-info dw-mod">
                                            <a href="{{link}}" onclick="{{#if googleImpression}}googleEnchantImpressionClick({{googleImpression}}, event){{/if}}" title="{{name}}" class="u-color-inherit">
                                                @Render(new Heading { Title = "{{name}}", Level = 6, CssClass = "u-condensed-text u-bold" })
                                            </a>

                                            @if (productListShowNumber)
                                            {
                                                <div class="item-number dw-mod">{{number}}</div>
                                            }
          
                                            @RenderGridViewPriceInfo()
                                        </div>

                                        <div class="product-list__grid-item__footer dw-mod">
                                            @RenderProductGridItemAddToCart()

                                            @if (User.IsStockInfoAllowed() && productListShowStock)
                                            {
                                                <div class="u-margin-top">
                                                    <div><span class="stock-icon {{stockState}} u-no-margin dw-mod" title="{{stockText}}"></span> {{stockText}}</div>
                                                    <div>
                                                        {{#if deliveryText}}
                                                            {{deliveryText}}
                                                        {{else}}
                                                        -
                                                        {{/if}}
                                                    </div>
                                                </div>
                                            }

                                            @if (showAddToDownloadButton && Pageview.User != null)
                                            {
                                                Button addButton = new Button { Title = "<span class='js-button-text'>" + Translate("Add") + "</span>", ButtonLayout = ButtonLayout.Primary, CssClass = "u-no-margin u-margin-top btn--condensed dw-mod js-add-to-downloads", Icon = new Icon { Prefix = "fas", Name = "fa-plus", CssClass = "js-button-icon", LabelPosition = IconLabelPosition.After } };
                                                addButton.ExtraAttributes.Add("data-product-id", "{{productId}}");
                                                @Render(addButton)
                                            }
                                        </div>
                                    </div>
                                
                            </div>
                        {{/each}}
                    </div>
                </div>
                <div class="grid__col-45px grid__col--bleed-x">
                    <div class="grid__cell grid__cell--align-middle-right">
                        @{
                            Button nextButton = new Button { Icon = new Icon { Prefix = "fas", Name = "fa-chevron-right fa-2x", LabelPosition = IconLabelPosition.After }, ButtonLayout = ButtonLayout.Clean, CssClass = "btn--condensed {{nextdisabled}} u-position-relative", OnClick = "HandlebarsBolt.UpdateContent('ProductList_{{groupName}}', '{{nextPage}}')" };
                            nextButton.ExtraAttributes.Add("", "{{nextdisabled}}");
                        }
                        @Render(nextButton)
                    </div>
                </div>
            </div>
        </div>
</script>

<script id="StickersContainer" type="text/x-template">
    <div class="stickers-container stickers-container--{{{convertStickerPositionToClassName Position}}} dw-mod">
        {{#Stickers}}
            {{>Sticker}}
        {{/Stickers}}
    </div>
</script>

<script id="Sticker" type="text/x-template">
    @Render(new Sticker { Title = "{{Title}}", CssClass = "{{CssClass}}" })
</script>

<script>
    @{
        bool relatedUseGoogleTagManager = !string.IsNullOrEmpty(Pageview.AreaSettings.GetItem("Settings").GetString("GoogleTagManagerID"));

        if (relatedUseGoogleTagManager)
        {
            <text>
                document.addEventListener("DOMContentLoaded", function (event) {
                    Scroll.AddIsInViewportListener(".js-product-scroll-trigger", function (elem) {
                        let googleImpression = JSON.parse(elem.getAttribute("data-params"));
                        googleImpression.list = "Related products";
                        googleEnchantImpression(googleImpression);
                        elem.classList.remove("js-product-scroll-trigger");
                    });
                });
            </text>
        }
    }
</script>

@RenderRow(Model, "full")