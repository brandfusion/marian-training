@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Content
@using Dynamicweb.Content.Items
@using Dynamicweb
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General

@functions {
    public string GenerateRgba(string color, string opacity)
    {
        color = color.Replace("#", "");
        if (color.Length == 6) {
            return "rgba(" + Convert.ToInt32(color.Substring(0, 2), 16) + ", " + Convert.ToInt32(color.Substring(2, 2), 16) + ", " + Convert.ToInt32(color.Substring(4, 2), 16) + ", " + opacity + ");";
        } else {
            return Convert.ToInt16(color).ToString();
        }
    }
}

@helper RenderRow(GridRowViewModel row, string size) { 
    var colorService = new ColorSwatchService();
    string columnLayout = size != "full" ? "content-row--" + size + "col" : "content-row--full"; 
    string rowWidth = row.Item.GetList("Width") != null ? "content-row--" + row.Item.GetList("Width").SelectedValue : "";
    string rowHeight = row.Item.GetList("Height") != null ? "content-row--height-" + row.Item.GetList("Height").SelectedValue : "";
    string spacing = row.Item.GetList("Spacing") != null ? "content-row--spacing-" + row.Item.GetList("Spacing").SelectedValue : "";
    string spacingPosition = row.Item.GetList("SpacingPosition") != null ? "content-row--spacing-position-" + row.Item.GetList("SpacingPosition").SelectedValue : "";
    string columnGap = row.Item.GetList("ColumnGap") != null ? "content-row--column-gap-" + row.Item.GetList("ColumnGap").SelectedValue : "content-row--column-gap-sm";
    string backgroundColor = row.Item.GetString("BackgroundColor") != null ? row.Item.GetString("BackgroundColor") : "";
    backgroundColor = !backgroundColor.Contains("#") ? "background-color: " + colorService.GetHexColor(Pageview.AreaID, backgroundColor) : "background-color: " + backgroundColor;
    //intro outro
    ItemViewModel intro = row.Item.GetItem("Intro");
    ItemViewModel outro = row.Item.GetItem("Outro");

    string overlapTop = row.Item.GetList("OverlapTop") != null ? row.Item.GetList("OverlapTop").SelectedValue : "";
    string overlapBottom = row.Item.GetList("OverlapBottom") != null ? row.Item.GetList("OverlapBottom").SelectedValue : "";

    string overlapTopStyle = overlapTop != "" ? String.Format("margin-top:-{0}px; position:relative; z-index: 100", overlapTop) : "";
    string overlapBottomStyle = overlapBottom != "" ? String.Format("margin-bottom:-{0}px; position:relative; z-index: 100", overlapBottom) : "";

    Image image = new Image();

    string videoBackground = row.Item.GetString("BackgroundVideo");

    string backgroundColorOverlay = row.Item.GetString("BackgroundColorOverlay");
    string backgroundColorOverlayStyle = "";
    backgroundColorOverlayStyle = backgroundColorOverlay != "" ? String.Format("background-color:{0}", GenerateRgba(backgroundColorOverlay, "0.3")) : ""; 

    if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
    {
        int cropMode = !string.IsNullOrEmpty(Convert.ToString(Model.Item.GetList("ImageCrop"))) ? Convert.ToInt32(Model.Item.GetList("ImageCrop").SelectedValue) : 0;

        image = new Image
        {
            Path = Model.Item.GetFile("Image") != null ? Model.Item.GetFile("Image").Path : "",
            CssClass = "background-image__cover",
            ImageDefault = new ImageSettings
            {
                Crop = cropMode,
                Height = 845,
                Width = 1920
            },
            ImageMedium = new ImageSettings
            {
                Crop = cropMode,
                Height = 450,
                Width = 1024
            },
            ImageSmall = new ImageSettings
            {
                Crop = cropMode,
                Height = 544,
                Width = 640
            }
        };

        image.FilterPrimary = !string.IsNullOrEmpty(Model.Item.GetList("ImageFilterPrimary").SelectedValue) ? (ImageFilter)Enum.Parse(typeof(ImageFilter), Model.Item.GetList("ImageFilterPrimary").SelectedValue.Replace("-", ""), true) : ImageFilter.None;
        image.FilterSecondary = !string.IsNullOrEmpty(Model.Item.GetList("ImageFilterSecondary").SelectedValue) ? (ImageFilter)Enum.Parse(typeof(ImageFilter), Model.Item.GetList("ImageFilterSecondary").SelectedValue.Replace("-", ""), true) : ImageFilter.None;

        if (!string.IsNullOrEmpty(Model.Item.GetString("ColorForTheFilter")))
        {
            image.FilterColor = Model.Item.GetString("ColorForTheFilter").StartsWith("#") ? GenerateRgba(Model.Item.GetString("ColorForTheFilter"), "0.3") : "";
        }
    }

    

    <div class="content-container grid__col-12 dw-mod" style="@backgroundColor;">
        @if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
        {
            <div class="background-image dw-mod" style="@backgroundColorOverlayStyle">
                <div class="background-image__wrapper dw-mod">
                    @Render(image)
                </div> 
            </div>
        } 
        else if (!string.IsNullOrEmpty(videoBackground))
        {
            <div class="background-image dw-mod">
                <div class="background-image__wrapper video__wrapper dw-mod @videoBackground" data-height="@rowHeight">
                    <video playsinline="" autoplay="" muted="" loop="">
                        <source src='@videoBackground' type="video/mp4"/>
                    </video>
                </div> 
            </div>
        }

        @RenderIntroOutro(intro)
        <div class="content-row @columnLayout @columnGap @rowWidth @rowHeight @spacing @spacingPosition dw-mod" style="@overlapTopStyle; @overlapBottomStyle;">
            
        
            @foreach (var column in row.Columns)
            {
                @RenderColumn(column)
            }

            
        </div>
        @RenderIntroOutro(outro)
    </div>
}

@Include("ColumnBase.cshtml")
@Include("IntroOutro.cshtml")