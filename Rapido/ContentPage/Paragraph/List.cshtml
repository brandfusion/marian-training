@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General

@Include("ParagraphBase.cshtml")
@{
    int titleHeadingSize = Model.Item.GetList("TitleHeadingSize") != null && Model.Item.GetList("TitleHeadingSize").SelectedValue != "" ? Convert.ToInt32(Model.Item.GetList("TitleHeadingSize").SelectedValue) : 0 ;
    int subtitleHeadingSize = Model.Item.GetList("SubtitleHeadingSize") != null && Model.Item.GetList("SubtitleHeadingSize").SelectedValue != ""? Convert.ToInt32(Model.Item.GetList("SubtitleHeadingSize").SelectedValue) : 0 ;
    string size = Model.Item.GetList("ElementsPerRow").SelectedValue;
    string columnLayout = size != "full" ? "content-row--" + size + "col" : "content-row--full";
    string rowWidth = "";// row.Item.GetList("Width") != null ? "content-row--" + row.Item.GetList("Width").SelectedValue : "";
    string rowHeight = "";// row.Item.GetList("Height") != null ? "content-row--height-" + row.Item.GetList("Height").SelectedValue : "";
    string spacing = "";// row.Item.GetList("Spacing") != null ? "content-row--spacing-" + row.Item.GetList("Spacing").SelectedValue : "";
    string spacingPosition = "";// row.Item.GetList("SpacingPosition") != null ? "content-row--spacing-position-" + row.Item.GetList("SpacingPosition").SelectedValue : "";
    string columnGap = "";// row.Item.GetList("ColumnGap") != null ? "content-row--column-gap-" + row.Item.GetList("ColumnGap").SelectedValue : "content-row--column-gap-sm";
    string backgroundColor = "";// row.Item.GetString("BackgroundColor") != null ? row.Item.GetString("BackgroundColor") : "";
    //backgroundColor = !backgroundColor.Contains("#") ? "background-color: " + colorService.GetHexColor(Pageview.AreaID, backgroundColor) : "background-color: " + backgroundColor;
    //intro outro
	var listGridView = Model.Item.GetList("Layout").SelectedValue;
    var list = Model.Item.GetItems("List");
}

<div class="u-full-width">
    @if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle")) {
        <div class="u-margin-bottom--lg">
            @if (!Model.Item.GetBoolean("HideTitle")) { 
                @Render(new Heading { Title = Model.Item.GetString("Title"), Level = titleHeadingSize, CssClass = "u-no-margin" })
            }
            @if (!string.IsNullOrEmpty(Model.Item.GetString("Subtitle"))) { 
                @Render(new Heading { Title = Model.Item.GetString("Subtitle"), Level = subtitleHeadingSize, CssClass = "u-margin-top" })
            }
        </div>
    }

    <div class="content-row @columnLayout @columnGap @rowWidth @rowHeight @spacing @spacingPosition dw-mod">
             
            @foreach (var listElement in list)
            {
                @RenderColumnList(listElement, listGridView)
            }
            
	</div>


</div>

@helper RenderColumnList(ItemViewModel item, string layout) {
	
  		 if(item != null) { 
      			 
			string innerPadding = item.GetList("Padding") != null ? " padding-size-" + item.GetList("Padding").SelectedValue.ToLower() : "";
    		innerPadding += item.GetList("PaddingPosition") != null ? " padding-position-" + item.GetList("PaddingPosition").SelectedValue.ToLower() : "";
    		int titleHeadingSize = item.GetList("TitleHeadingSize") != null && item.GetList("TitleHeadingSize").SelectedValue != "" ? Convert.ToInt32(item.GetList("TitleHeadingSize").SelectedValue) : 0 ;
			int subtitleHeadingSize = item.GetList("SubtitleHeadingSize") != null && item.GetList("SubtitleHeadingSize").SelectedValue != ""? Convert.ToInt32(item.GetList("SubtitleHeadingSize").SelectedValue) : 0 ;
    		string title = item.GetString("Title");
    		string subtitle = item.GetString("Subtitle");
    		string text = item.GetString("Text");
			string horizontalAlignment = item.GetList("HorizontalAlignment").SelectedValue;
            string horizontalAlignClass = horizontalAlignment != null ? "u-align-" + item.GetList("HorizontalAlignment").SelectedValue.ToString().ToLower() : "";
			string verticalAlignment = item.GetList("VerticalAlignment").SelectedValue;
            string listLayout = layout;
			string textColor = item.GetString("TextColor");
            
			<div class="grid-list-wrapper @listLayout @innerPadding">
              <div class="img-wrapper">
                  @if (!string.IsNullOrEmpty(item.GetString("Image"))) {

                        int width = item.GetString("ImageWidth") != null ? item.GetInt32("ImageWidth") : 100;
                        string styleSetting = item.GetString("ImageStyle") != null ? item.GetList("ImageStyle").SelectedValue : "";
                        ImageStyle style = ImageStyle.None;
                        style = styleSetting == "ball" ? style = ImageStyle.Ball : style;
                        style = styleSetting == "triangle" ? style = ImageStyle.Triangle : style;

                        Image image = new Image()
                        {
                            Path = item.GetFile("Image") != null ? item.GetFile("Image").Path : "",
                            Style = style,
                            ImageDefault = new ImageSettings
                            {
                                Crop = 5,
                                Width = width
                            }
                        };

                        if (styleSetting == "square") {
                            image.ImageDefault.Crop = 0;
                            image.ImageDefault.Height = image.ImageDefault.Width; 
                        }

                        @Render(image) 
                }

              </div>
              <div class="content_list_wrapper @horizontalAlignClass" style="color: @textColor">
                  @if (!item.GetBoolean("HideTitle")) { 
                 	 @Render(new Heading { Title = item.GetString("Title"), Level = titleHeadingSize, CssClass = "u-no-margin" })
                  }
                  @if (!string.IsNullOrEmpty(item.GetString("Subtitle"))) { 
                     @Render(new Heading { Title = item.GetString("Subtitle"), Level = subtitleHeadingSize, CssClass = "u-margin-top" })
                  }
                     @Render(new Text { Content = item.GetString("Text") })
              </div>
				@if (!string.IsNullOrEmpty(item.GetItem("ButtonOne").GetString("Title"))) {
					<div class="buttons-collection u-block dw-mod">
                      @ParagraphButton(item.GetItem("ButtonOne")) 
					</div>
				} 
              
			</div>
      	}

}


@helper ParagraphButton(ItemViewModel item) { 
    if (item != null) {
        if (!string.IsNullOrEmpty(item.GetString("Title"))) {
            Button button = new Button {
                Title = item.GetString("Title"),
                Href = item.GetString("Link"),
                ButtonLayout = (ButtonLayout)System.Enum.Parse(typeof(ButtonLayout), char.ToUpper(item.GetList("Layout").SelectedValue[0]) + item.GetList("Layout").SelectedValue.Substring(1))
            };

            if (!string.IsNullOrEmpty(item.GetString("Icon"))) {
                button.Icon = new Icon { 
                    CssClass = item.GetString("Icon")
                };
            }

            @Render(button)
        }    
    }
}


